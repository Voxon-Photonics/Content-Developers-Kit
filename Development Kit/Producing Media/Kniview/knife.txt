KNIFE: Ken's Natural Interaction Format Editor by Ken Silverman
   Record/view/edit/playback utility for:
      Microsoft Kinect v2
      Microsoft Azure Kinect
      Creative/Intel SR300
      Intel D415

Notes written: 04/26/2016
Last updated:  12/17/2019

--------------------------------------------------------------------------------
KNIFE.EXE command line:
   knife               <-- run live video from Kinect v2/Senz3D
   knife rec0000.kni   <-- play looped video from specified file

   NOTE:If you specify no filename, KNIFE.EXE will attempt to run a camera live.
It requires the Kinect SDK to run because Microsoft designed things in a stupid
or intentionally annoying way. It can be made to run on a machine with no Kinect
SDK installed. Just ask me for a dummy KINECT20.DLL ;-)

--------------------------------------------------------------------------------
KNIFE.EXE controls:

Keys:
   ESC: quit
   1-5: set render mode: 1:2D, 2:IR dots, 3:RGB dots, 4:IR poly, 5:RGB poly
   Space/P: pause (/play if playing KNI)
   M: Toggle mute
   R: record video & audio to next REC####.KNI file (start/stop)
      KNI files contain:
         * Calibration parameters stored in camera's firmware (reverse-
             engineered from the libraries)
         * Custom-written lossless compression for depth buffer (approximately
             3:1 ratio)
         * JPEG-compliant writer for Infrared (qual=80) and RGB frames (qual=50)
         * audio - uncompressed

   /: reset pos & ori for 3D view
   Arrows/RCtrl/KP0: move 3D camera
   ,/.:  rotate view left/right around center
   L.Shift: fly 16x faster
   R.Shift: fly 16x slower

   -/=: adjust max depth (3D view) in steps of 250 (500..8000)
   [/]: change play speed
   Q/W/E: toggle head track mode (Q=off, W=show circle, E=full debug)
   F12: screen capture to: depth:KIND####.PNG, IR:KINI####.PNG, RGB:KINC####.PNG

Mouse:
   Raw view:
      LMB: scroll color view
      RMB: toggle 2x zoom of color view

   3d view:
      LMB: rotate camera
      RMB: rotate view left/right around center; move forward/back

--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
KNI File format: The following information is for programming experts only!

C-like pseudocode:
   int 'KenS';
#if 0
   int 'KNIf'; //obsolete/old format before Creative (Intel) SR300 support
   int sizeof(CameraIntrinsics); //from Microsoft API: always 28
   struct CameraIntrinsics
   {
      float FocalLengthX, FocalLengthY, PrincipalPointX, PrincipalPointY;
      float RadialDistortionSecondOrder, RadialDistortionFourthOrder, RadialDistortionSixthOrder;
   };
   int sizeof(color_intrinsics_t); //See here: https://github.com/OpenKinect/libfreenect2/issues/41 (hint:see offset 0x1a904c in a .XEF file ;-)
   struct color_intrinsics_t
   {
      float depth_f; //copied from depth instrinsics structure for convenience for some internal functions: same as FocalLengthX&FocalLengthY in CameraIntrinsics
      float color_f, color_cx, color_cy, shift_d, shift_m, depth_q, color_q; //hard-coded constants (same for all Kinect v2)
      float mx_xxx, mx_yyy, mx_xxy, mx_xyy, mx_xx, mx_yy, mx_xy, mx_x, mx_y, mx_1; //calculated (i.e. reverse-engineered) from ->MapCameraPointsToColorSpace() :)
      float my_xxx, my_yyy, my_xxy, my_xyy, my_xx, my_yy, my_xy, my_x, my_y, my_1; //calculated (i.e. reverse-engineered) from ->MapCameraPointsToColorSpace() :)
   };
   while (!eof)
   {
      char type;
      int compsiz; //bytes in block data (following this field)
      float time; //since beginning of file in seconds
      char compbuf[compsiz];

      switch(type)
      {
         case 'D': /*   depth frame: custom lossless compression; see below*/      break;
         case 'I': /*infrared frame:  512* 424 JPG image at quality 80 (default)*/ break;
         case 'C': /*   color frame: 1920*1080 JPG image at quality 50 (default)*/ break;
         case 'A': /* audio samples: uncompressed 32-bit integer PCM; 4 channels; 16KHz*/ break;
      }
   }
#else
   int 'KNIF';

      //Depth/Color Calibration block:
   char 'B';
   int camtype; //0=Kinect v2, 1=Senz (SR300), 2=RealSense 2.0 (SR300/D415)
   int blksize; //# bytes in block (following this field)
   if (camtype == 0)
   {
         //Depth intrinsics for Kinect v2:
      float FocalLengthX, FocalLengthY, PrincipalPointX, PrincipalPointY;
      float RadialDistortionSecondOrder, RadialDistortionFourthOrder, RadialDistortionSixthOrder;
         //Color intrinsics for Kinect v2: //see here: https://github.com/OpenKinect/libfreenect2/issues/41 (hint:see offset 0x1a904c in a .XEF file ;-)
      float color_f, color_cx, color_cy, shift_d, shift_m, depth_q, color_q; //hard-coded constants (same for all Kinect v2)
      float mx_xxx, mx_yyy, mx_xxy, mx_xyy, mx_xx, mx_yy, mx_xy, mx_x, mx_y, mx_1; //calculated (i.e. reverse-engineered) from ->MapCameraPointsToColorSpace() :)
      float my_xxx, my_yyy, my_xxy, my_xyy, my_xx, my_yy, my_xy, my_x, my_y, my_1; //calculated (i.e. reverse-engineered) from ->MapCameraPointsToColorSpace() :)
   }
   else if ((camtype == 1) || (camtype == 2))
   {
         //Depth intrinsics for SR300/D415:
      float FocalLengthX, FocalLengthY, PrincipalPointX, PrincipalPointY;
      float RadialDistortion[3], TangentialDistortion[2];
         //Color intrinsics for SR300/D415:
      float FocalLengthX, FocalLengthY, PrincipalPointX, PrincipalPointY;
      float Translation[3], Rotation[9];
      if (camtype == 2)
      {
         float dep2met;
      }
   }
   else if (camtype == 3)
   {
         //Intrinsics for Azure Kinect; see: https://github.com/opencv/opencv/blob/master/modules/calib3d/src/undistort.dispatch.cpp
      float cx, cy, fx, fy, k1, k2, k3, k4, k5, k6, p2, p1; //k4a_calibration_t:depth_camera_calibration.intrinsics.parameters.param.* (Brown Conrady model)
      float cx, cy, fx, fy, k1, k2, k3, k4, k5, k6, p2, p1; //k4a_calibration_t:color_camera_calibration.intrinsics.parameters.param.* (Brown Conrady model)
      float rot[9];                                         //k4a_calibration_t.extrinsics[K4A_CALIBRATION_TYPE_DEPTH][K4A_CALIBRATION_TYPE_COLOR].rotation[*]
      float trans[3];                                       //k4a_calibration_t.extrinsics[K4A_CALIBRATION_TYPE_DEPTH][K4A_CALIBRATION_TYPE_COLOR].translation[*]
   }

   while (!eof)
   {
      char blktype; //'D'/'I'/'C'/'S'
      float time;  //time of block - since beginning of file in seconds
      int blksize; //# bytes in block (following this field)
      switch(blktype)
      {
         case 'D': /*   depth frame: custom lossless compression; see below*/                break;
         case 'I': /*infrared frame: 512x424 .. 1280x720 JPG image at quality 80 (default)*/ break;
         case 'C': /*   color frame: typically 1920x1080 JPG image at quality 50 (default)*/ break;
         case 'S': /*   sound block: stored uncompressed. Each block contains:
                  int samprate; //typically: 16000 (Hz)
                  int nchans; //ex: 2 (SR300), 4 (Kinect v2), 1 (default microphone)
                  int bitspersamp; //typically 32 indicating 32-bit int PCM (using highest bits)
                  int samps[(blksize-12)>>2];
                  break;
      }
   }
#endif

   Lossless depth buffer compression (designed by Ken Silverman):
      char id; //'K'
      char version; //'0', '1'
      unsigned short xsiz, ysiz; //512,424 for Kinect V2; 640,480 for Creative SR300, up to 1280,720 for D415

         //1st pass: store depth values of 0 separately. (Kinect v2 uses 0 to indicate unreliable depth).
         // * Uses RLE, with Rice codes to encode lengths.
         // * depth array treated as single consecutive 1D array.
      [1 bit]: State of top-left pixel: 0=depth is 0, 1=depth is non-zero (i.e. 500-7999 for Kinect v2. (value found in 2nd pass))
      do
      {
         Number of pixels (-1) to next transition (0->1 or 1->0), using Rice code. Example:
            0: [0]
            1: [100]
            2: [101]
            3: [11000]
            4: [11001]
            5: [11010]
            6: [11011]
            7: [1110000]
            8: [1110001]
            ..

      } while (xsiz*ysiz pixels have not yet been encoded);
      //Note: a dummy transition must always occur at offset:xsiz*ysiz to end the stream

      if (version == '1')
      {
            //Keep track of which 16-bit depth values actually exist in current image; here we write the table of used values
            //Notably, the Intel D415 camera only uses a small subset (about 2000 values) of the 16-bit space - quantized reciprocals.

         //Value 0 is skipped (see above)
         Write exponential Golomb code of count or consecutive 0's (typically 200-400)
         Write exponential Golomb code of count or consecutive 1's (typically 400-1200)
         for(;i<65536;i++)
         {
            predict = ?;
            write count of 0's to next 1 - predict, encoded as exponential Golomb code
         }
      }

         //2nd pass: non-zero Depth values
      for(y=0;y<ysiz;y++)
         for(x=0;x<xsiz;x++)
         {
            if (depth(x,y) == 0) continue;

               //Prediction: (from current frame only!)
            v0 = depth(x-1,y  ) //If out of bounds (x < 0 or y < 0), depth is 0
            v1 = depth(x  ,y-1)
            v2 = depth(x-1,y-1)
            switch((v0 != 0) + (v1 != 0) + (v2 != 0)) //number of non-zero v's
            {
               case 0: /*no break intentional*/
               case 1: predict =  v0+v1+v2;     break;
               case 2: predict = (v0+v1+v2)>>1; break;
               case 3: predict =  v0+v1-v2;     break;
            }
            if (version == '0')
            {
               switch([3 bits]) //residual encoding
               {
                  case 0: depth(x,y) = predict
                  case 1: depth(x,y) = predict + 1
                  case 2: depth(x,y) = predict - 1
                  case 3: depth(x,y) = predict + [1 bit]:{-2, +2}
                  case 4: depth(x,y) = predict + [2 bits]:{-4,-3, +3,+4}
                  case 5: depth(x,y) = predict + [3 bits]:{-8,-7,-6,-5, +5,+6,+7,+8}
                  case 6: depth(x,y) = predict + [4 bits]:{-16,-15,-14,-13,-12,-11,-10,-9, +9,+10,+11,+12,+13,+14,+15,+16}
                  case 7: depth(x,y) = [13 bits] //depth value stored directly - not residual
               }
            }
            else
            {
               write (actual value - predict) encoded as exponential Golomb code
            }
         }

--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
