# Voxon Runtime Readme
28/07/2023 - Matthew Vecchio for Voxon Photonics

By default, the Voxon Runtime files are located in C:\Voxon\System\Runtime

These runtime files make our volumetric technology possible. When used with Voxon Hardware the volumetric display is created. When ran on a standard Windows computer they launch a simulation. 



## Voxiebox.DLL update history

Here is a list of major updates included in each public version of the VoxieBox.dll

**FEB 17 2021 Runtime**
 
 * DICOS (security version of DICOM data) supported.
 * Set custom capture folder via voxiebox.ini.
 * Vertex colour interpolation for surfaces for all render modes.
 * Global normal shading added.

**MAY 21st 2021 Runtime**

* JoyGetPosEx (useJoy=0) now auto detects controllers without pioir movement.
* Frame Per Vol option removed from Advanced Menu.
* VCB recording added.
* Lockscreen password feature added.
* .Wav files with advanced waveHeader now supported.
* Temperature throttling enabled.
* Voxie_debug_drawtile() function added.


**SEPTEMBER 27th 2021 Runtime**

* voxie_playsound_seek() function added.
* .KVS file format now supported.
  
  
**FEBRUARY 8th 2022 Runtime**

* voxie_printalpha_ext() function added.
* sndfx_nspk setting added for stereo volumetric displays.
  
  
**NOVEMBER 16th 2022 Runtime**

* Individual dotsize adjustment added
* VCB playback shaper and clearer
* Audio playback now supports .Wav 24bit format 
* Global Normal Shading now uses a logarithmic scale instead of linear
* Exclusive mouse moved from Voxiebox.ini to Voxiebox_menu0.ini
* Autosleep function added.
* OBJS with no materials assigned show as pure white instead of blue-ish

**DECEMBER 8th 2022 Runtime**

* Added ability to remove shutdown button from file menu. Put "vw.hacks |= (1<<9);" between voxie_load()&voxie_init() to make shutdown button not appear. 

**July 28th 2023 Runtime**

* Moving SpaceMouse now wakes from hibernation
* DLL checks for previous running VoxieBox process(es) and terminates it/them
* BigPak (VoxieBox UDP networking protocol) has new functions for Blender Plugin, projector ID, voxie_debug_print6x8() and playing sounds.
* Added Hacks to disable shutdown button 
* Removed debug code from voxieHeightMap() function
* Emulation modes renamed to VX1 and VXR 
* Fix Page Flipping Bug in 3 Projector Mode



## Voxon Runtime File List:

| File					| 	Description 				   |
|---------------------------------------|--------------------------------------------------
|c#-bridge-interface.dll		|The interface library for the C# bridge – used by the Unity Plugin
|c#-Runtime.dll				|C# bridge which works which wraps the voxiebox.dll 
|grab.flac				|Sound file when using the Voxie Menu
|typeKey.flac				|Sound file when using the Voxie Menu
|voxiebox.dll				|The core library. Essential to running any VX software
|voxiebox.ini				|Voxiebox.dll’s System settings configuration file - human editable
|voxiebox_menu_0.ini			|Voxiebox.dll’s User settings configuration - human editable
|voxiebox_menu_1.ini			|Backup of default settings for a VX1 with Keynote projector 
|voxiebox_menu_2.ini			|Backup of default settings for a VX1 with Anhua projector
|runtimeinfo.json			|Human readable file contains the build date of files. Used by Vertex
|voxiebox.log				|Log file amended to whenever a voxiebox.dll is executed or terminated 
|vxCpp.dll				|Library for VX apps using the VX++ / C++ framework
|VoxonRuntime.txt			|Help and details about the runtime. This file. 


### Setting Path Variable and Registry Settings  

On Voxon hardware systems (and recommended on Developers Kit installs) a user environment path variable is setup give path access to the runtime files. For the Voxon Unity Plugin to correctly work some registry keys need to be created.

To setup your path or registry, run the batch file ‘Set Path and Registry.bat’ located under "C:\Voxon\System\Setup” which set these registry values.  

There is also a neat registry value you can add which will add 'Open Folder in VoxieOS' to the right click menu in Windows. So when using Windows Explorer you can right click the mouse and open up any folder in VoxieOS.


### VoxieBox.ini

The voxiebox.ini is a human readable / editable configuration file. The voxiebox.ini contains system and hardware settings. In general, the settings within voxiebox.ini are set once and do not need to be reconfigured unless there is a system or hardware change.  

##### Essentail Settings

**Default values are expressed after the =**

The first line of the voxiebox.ini should be [VOXIEBOX] or the voxiebox.dll / VX application won't load the settings on launch.


useemulation=0; 

// **HW Only** Specifies to launch in hardware or simulator with what rending style.
//	0 = Launch on Voxon Hardware (if found)
//	1 = Launch in simulator (Perspective View)
//  2 = Launch in simulator (Solid Perspective)
//  3 = Launch in simulator (Orthographic View)



usejoy=0;               

// Set USB game controller API, 0=joyGetPosEx (directInput), 1=XInput



showhelp=-1;      
      
// Shows extra information on the secondary screen for some Voxon Apps (VoxieOS, VoxieDemo, etc) 
// -1 shows help on hardware but not when using simulator
//  1 always on
//  0 always off



showadvancedmenu=0;    

// Enables advanced settings displayed on the VoxieMenu when a VX app is running. 
// 1 = enable 
// 0 = disable



logfile=voxiebox.log 

// the name of the log file to write every time the Voxiebox.dll is accessed. note there is no ';' at end of the value. Output is in the same directory as where the voxiebox.dll resides, unless you hardcode a path.


 
loginterval=-1;    	

// While a VX app is running how often the log file should be amended expressed in seconds. -1 logs only when its something critical.


logusecsv=0;          	

// If enabled the voxiebox.log file is separated by comma separated value (csv) format.




voxie_vol_limit=70;    

// **HW Only** the maximum value the motor coils can extrude. **WARNING** adjusting this value can damage your  system. Value is usually between 60...85 value is different with each device depending on the resonator and the efficiency of the coils. When this value is set correctly the volumetric display should reach 8cm volume WITH the dome on when the motor is set to '100'. (The motor tab in the VX menu)



celcius_warning=35;     

// **HW Only** Temperature warning displayed on the touch screen when the Voxon Motherboard reaches this temperature.



celcius_shutdown=40;    

// **HW Only** System shutdown when the Voxon motherboard reaches this temperature



celcius_startramp=25;	

// **HW Only** Activates temperature throttling when CPU temp is above this value



celcius_subperdeg=0.04;	

// **HW Only** How much to adjust the temperature if above 'celcius_startramp' threshold.



volcapdir=C:\Voxon\Media\MyCaptures\ 

// set a custom directory to put volume captures. (any VX app can capture a PNG, PLY or VCB of its volumetric content - a volumetric 'screen shot'. Look under the Misc. tab in the VoxieMenu) **NOTE** This setting does not end with a semicolon ;


port=8081                   

// Set default port number for networking. **NOTE** This setting does not end with a semicolon ;



join=192.168.201.53

// Set default join ip address for networking. **NOTE** This setting does not end with a semicolon ;



noheartbeat_shutdown=10.0;  

// **HW Only** if VX app doesn't update (usually due to a CPU freeze or CPU overworking) within the value's amount in seconds the motors will stop. 



vsync_usb_offset=+30; 

// **HW Only** Offset to add to USB packet timing into 120Hz vsync frame - try to keep arrow centered between 2 marks in show stats. 



phase_shutdown_sensitivity=8192; 

// **HW Only** how much the coils are out of sync before the system shutdown 768:insanely sensitive, 2048:sensitive, 8192:default, 32768:max/disabled

#include "voxiebox_menu0.ini" 

// this line needs to be in the voxiebox.ini file otherwise the user settings won't get loaded in



#### Optional Settings: 


openmenubyslashonly=0;  

// If enabled only pressing the ' \ ' key will open the Voxie Menu. 1 = enable, 0 = disable 



menu_keyscancode=0x2b;  

// Choose an alternative button to bring in the voxieMenu. Keyboard scan code uses same syntax as 
// Voxon development use the 'keyview.exe' utility found in C:\Voxon\System\Utilities to see values. 
// some recommended values:
// 0x2b = Backlash, 0x0f = Tab, 0x0e = Backspace, 0x3f = F5, 0x1c = Enter.



excl_audio=0;         
excl_samprate=48000;  
excl_bitspersamp=24;  


// Exclusive audio mode. If enabled (excl_audio=1); Only the VX app will be able to play sound. 
// This results in a faster and more stable connection but other background apps don't have access // to audio.
//
// if exclusive audio is enabled the sample rate and bit rate must be set for the sound to be 
// audible.
/
// excl_audio=1 = exclusive (faster & more stable), 
// excl_audio=0 = shared (if audio access to other programs is required)
// set exclusive audio's sample rate 
// excl_samprate=48000; Sample rates: 16000, 22050, 32000, 44100, 48000, 88200, 96000, 192000
// excl_bitspersamp=24; 16, 24, 32 (float)



touchcontrols=0; 

// if enabled. Show touch keyboard on the secondary screen when launched. 1=enabled, 0=disable



lock_touch_pw=1234  
lock_touch_message=Enter passkey    



// Lock touch allows the touch screen to be locked with a passcode.
// lock_touch_pw=1234 password for the touch lock screen must be a numeric code. **NOTE** This 
// setting does not end with a semicolon ;
// lock_touch_message=Enter passkey = Set a message to prompt user to enter password. **NOTE** This // setting does not end with a semicolon ; 
//
// Some extra fun settings with the lock_touch, there are two hidden options if a user gets the 
// passcode wrong you can insult them and make them wait! Play a trick on somebody!  
//
// lock_touch_insult=Well, well. It seems we have an imposter. Enjoy the time penalty.
// lock_touch_penaltytim=5;



xdim=912;       
ydim=1140;      
projrate=120;   
flipmode=2;     

// **HW Only** Projector display settings
// xdim=912; 	= Set the x resolution for the volumetric display, default 912.
// ydim=1140;	= Set the y resolution for the volumetric display, default 1140.
// projrate=120; = Set projector refresh rate in hertz. 120 default.
// flipmode=2;  = DirectX graphical setting this option switches the DXGI_SWAP_EFFECT_DISCARD flag: 
// 0=DXGI_SWAP_EFFECT_DISCARD, 1/2/3=DXGI_SWAP_EFFECT_SEQUENTIAL using 1/2/3 backbuffers



#### Graphic Card / Direct X settings :

	bufcount=3; 

	// **HW Only** DirectX buffer settings for graphical calls. 0 = always bad don't use. 1 = may work w/flipmode 0  2= may work with flipmode 2, 3 = usually safe with all flipmodes (recommended)  

	dxgibpp=24; 

	// **HW Only** Direct X bits to use for color data : 24 = default, 30 = if 24 isn't working with the display driver use to fix 'bigramp' issues.

	flipord=-1; 

	// **HW Only** For multi-display sync: -1:cycle order each frame (recommended), 0-5:flip in specific order. Default is -1;



invertzhack=0; 

// hack to invert the Z axis. 1 is inverted, 0 is normal.



snfx_nspk=1; 

// Define how many speakers are installed onto the hardware.
// 1 = single speaker (VX1); 2 for stereo / systems  



lcdxres=1024; 
lcdyres=600; 

// Set custom touch screen / secondary screen X and Y resolution expressed by pixel.


  
  
rgbswapingame=?;
rgbswaponexit=?; 
usbswaphak=?;
hdmisawphak=?; 

// **HW Only** When running a multi projector system these settings change the projector's output 
// colours.
//
// rgbswapingame=?; = (0...5) Swaps the order of each group of 8 bits in the 24-bit color that is
// interpreted by the LC4500 firmware
// 
// rgbswaponexit=?; = (0...5) Swaps OS's Desktop colours being wrong on the projected display upon exit
// of a VX app this should only exist if there is some hardware issue
//
// usbswaphak=?;  = (0...5) swaps USB projector detection order if using multiple projectors
// hdmisawphak=?; = (0...5) swaps HDMI projector detection order if using multiple projectors




#### Depreciated Settings

The following are older settings which may or may not work.





user_dispnum1;  
user_col0r=0xff0000;
user_col0g=0x00ff00;
user_col0b=0x0000ff;

// Defines a user set colour mode using the LED's and projector can set it to r,g,b
// example 'user_disnum1; user_col0b=0x000066;' will make a user custom colour mode of the blue LED // from projector 0 set to 0x000066.  This setting will be displayed in the 'Render' tab in the
// VoxieMenu

	user_dispnum=1; user_col0r=0xff0000; // red user colour
	user_dispnum=1; user_col0g=0x00ff00; // green user colour
	user_dispnum=1; user_col0b=0x0000ff; // blue user colour
  
  
  
user_dispnum=3; 
user_col0r=0xff0000; 
user_col1g=0x00ff00; 
user_col2b=0x0000ff; 


// Defining a user colour mode for a multi-projector display. See a few examples below:

	user_dispnum=3; user_col0r=0xff0000; user_col1g=0x00ff00; user_col2b=0x0000ff; //R,G,B :)
	user_dispnum=3; user_col0b=0x0000ff; user_col1r=0xff0000; user_col2g=0x00ff00; //R,G,B wrong!
	user_dispnum=3; user_col0g=0x00ff00; user_col1b=0x0000ff; user_col2r=0xff0000; //R,G,B wrong!
	user_dispnum=3; user_col0g=0xff0000; user_col1b=0x00ff00; user_col2r=0x0000ff; //B,R,G swap w/below!
	user_dispnum=3; user_col0b=0xff0000; user_col1r=0x00ff00; user_col2g=0x0000ff; //G,B,R swap w/above!



ledmuilpercelcover=0.95 

// HW legacy value to temperature adjustment - replaced by celcius_subperdeg not used in many public //releases of the DLL


voxie_aud=-1;   	//audio channel index to drive motor
sndfx_aud0=0;         	//audio channel index for left speaker for sound effectts
sndfx_aud1=1;           //audio channel index for right speaker for sound effects.


// these settings modify where audio content goes to which speakers. In early versions of our 
// display we used audio to drive the 3D volume. 
// -1 disabled
//  0 left channel
//  1 right channel



menu_on_voxie=0;      

// 1=draw menu on same display as Voxiebox (for single monitor system). This setting doesn't work 
// unless you are using a really old (before 2018) voxiebox.dll
//
// 0= display voxie menu on secondary touch screen




//patledhakr=0x00ffff; //cyan
//patledhakg=0xff00ff; //magenta
//patledhakb=0xffff00; //yellow  

// hack projector LED output patterns. Changes the color output this example uses brighter 
// but messed up colors


### Voxiebox_menu_0.ini


The voxie_menu_0.ini file is a human readable / editable configuration file. It contains most 
of the user settings. An interesting setting to note is that the keystone configuration is stored in the voxie_menu_0.ini. So, if the voxiebox_menu_0.ini is absent from the runtime, nothing will display on the hardware when a VX app is launched. 

Most of the voxieBox_menu_0.ini settings can be set using the various menu tabs although looking at these values can provide some insights on how your system is working.

When ‘Save Settings’ is pressed from the ‘File’ tab in voxie menu a new voxie_menu_0.ini is written with the new settings. It is written where voxiebox.dll resides. 

* Default values are expressed after the = 


usecolor=0;			

// 0= white, (-1 - -5) negative values for monochrome, 1 to use full color & two color modes

ilacemode=0; 		

// 0 = monochrome or RBG interlaced 6 = two color mode

// sensemasks and outcol determines in two colormode what are colours interpreted and then what colour they are output as the snsemasks work as filters and analyse the image data  in order.. sensemask0=0xff0000 would take all the RED channel colours and outcol0=0x0000ff would render all the sensemask0 data as BLUE. sensemask1=0xffff00 would take all the RED and GREEN color data and output it as outcol1's value. S

sensemask0=0xff0000; outcol0=0xff0000; 
sensemask1=0x00ff00; outcol1=0x00ff00;
sensemask2=0xffffff; outcol2=0xffffff;

// usecolor, ilacemode (interlace mode), sensemask0-2 and outputcol0-2 work together to determine what color mode is used when the VX application starts.

				// ## Monochrome settings
				//
				// useColor=0; ilacemode=0; 	// monochrome white
				// useColor=-1; ilacemode=0; 	// monochrome red				
				// useColor=-2; ilacemode=0; 	// monochrome green	
				// useColor=-3; ilacemode=0; 	// monochrome yellow			
				// useColor=-4; ilacemode=0; 	// monochrome blue		
				// useColor=-6; ilacemode=0; 	// monochrome cyan		
				// useColor=-5; ilacemode=0; 	// monochrome magenta
				//
				//
				// ## RGB setting
				//
				// useColor=1; ilacemode=0; 
				//
				//
				// ## Two color mode: 
				//
				// Two color modes need to have:
				//
				// useColor=1; ilacemode=6; 	
				//
				// and then set the sensemask and outcol values as follows.. 	 				
				//	Red and Blue mode:
				//	 
				// sensemask0=0xff0000; outcol0=0xff0000; 
				// sensemask1=0x0000ff; outcol1=0x0000ff;
				// sensemask2=0xffffff; outcol2=0xffffff;
				//
				//  Red and Green mode:
				//	 
				// sensemask0=0xff0000; outcol0=0xff0000; 
				// sensemask1=0x00ff00; outcol1=0x00ff00;
				// sensemask2=0xffffff; outcol2=0xffffff;
				//
				//	Blue and Green mode:
				//	 
				// sensemask0=0xff0000; outcol0=0xff0000; 
				// sensemask1=0x00ff00; outcol1=0x00ff00;
				// sensemask2=0xffffff; outcol2=0xffffff;
				//
				// Fun settings to play with (not selectable in the menu)
				//
				// YELLOW and BLUE and white
				//
				// sensemask0=0xffff00; outcol0=0xffff00;
				// sensemask1=0x0000ff; outcol1=0x0000ff;
				// sensemask2=0xffffff; outcol2=0xffffff;
				//
				// MAGENTA / Green and white
				// 
				// sensemask0=0xff00ff; outcol0=0xff00ff;
				// sensemask1=0x00ff00; outcol1=0x00ff00;
				// sensemask2=0xffffff; outcol2=0xffffff;
				// 
				// CYAN / Red and WHITE
				// 
 				// sensemask0=0x00ffff; outcol0=0x00ffff;
				// sensemask1=0xff0000; outcol1=0xff0000;
				// sensemask2=0xffffff; outcol2=0xffffff;
				// 
				// CGA ( CYAN // PURPLE and WHITE )
				// 
				// sensemask0=0x00ffff; outcol0=0x00ffff;
				// sensemask1=0xff0000; outcol1=0xff00ff;
				// sensemask2=0xffffff; outcol2=0xffffff;
				// 
				// CGA ( RED // GREEN and YELLOW)
				// 
				// sensemask0=0xff00ff; outcol0=0xff0000;
				// sensemask1=0x00ff00; outcol1=0x00ff00;
				// sensemask2=0xffffff; outcol2=0xffffff;
				
				

dispnum=1;  	

// how many displays to render the volumetric display. a VX1 only has 1 display, but a multi-
// projector system is supported.



hwdispnum=1;    

// How many actual hardware display numbers to work with. You can use this to simulate hardware 
// connections. 



hidemask=0;		

// a value between 0 and 7 hides various colour channels (R,G,B). 



gamma=2;		

// 0.0 - 4.0 the gamma level
// higher value = richer color but less brightness. 
// lower value =  less saturated but more brightness.

  
  
density=2;		

// 0.0 - 4.0 the density level
// lower value  = less voxels more performance
// higher value = more voxels less performance



framepervol=8;  

// How many images are used for a volumetric sweep. This setting is for advanced users only. 
// 8 would be for a standard VX1 operating at 15 Hertz.
// Unless you are experimenting with custom displays don't play with this setting. 



hwsync_frame0=1; 

// **HW ONLY** 1 is default value can be between 0 - 20, this number adjusts the sync point for the //image. Used to 'tune' in the volumetric image. It can be adjusted within the 'Motor' tab if  	 'showadvancedmenu=1' is set in voxiebox.ini there will be a course values.
  
  
  
hwsync_phase=8.000000; 

// **HW ONLY** 1 is default value can be between 0 - 20, this number adjusts the sync point for the //image. Used to 'tune' in the volumetric image. It can be adjusted within the 'Motor' tab if  	 'showadvancedmenu=1' is set in voxiebox.ini there will be a fine values.



hwsync_levthresh=384;  

// **HW ONLY** For a VX1 the infrared sensor threshold. the lower the value the more sensitive. You can see the sensor threshold if you run the 'host.exe' application



hwsync_amp0=1.000000; hwsync_pha0=0; 
hwsync_amp1=1.000000; hwsync_pha1=0; 
hwsync_amp2=1.000000; hwsync_pha2=0; 
hwsync_amp3=1.000000; hwsync_pha3=0; 

// HW only. These setting adjusts the coil's strength and phase individually. Easier to be adjusted 
// within the VX menu (have 'showadvnacedmenu=1;' in voxiebox.ini)



voxie_vol=38.00; 	

// the height of the volume. this is limited by the "voxie_vol_limit"  set out in voxiebox.ini



sndfx_vol=50.00; 	

// the audio level volume between 0 and 100. The higher the value the louder



excl_mouse=1;  		

// 0 = off, 1 = on. Exclusive mouse, takes control of the mouse input should be enabled on hardware. // Some demos require it but for ease of use on a simulator turn it off to see the mouse cursor.



emuhang=25.0; 
emuvang=-45.0; 
emudist=1350; 
emugam=2.0;   

//initial camera angle&pos for emulation (horiz/vert, degrees), camera distance, emulation gamma


aspx=1.00; 
aspy=1.01; 
aspz=0.45; 
aspr=1.41; 
asprmin=0.14; 

//aspect ratios settings, x,y,z. aspr and asprmin are used for VXR (spinner) displays where r is the radius if the display, asprmin is the inner radius to hide. 



drawstroke=3; 

// Up / Down (VX1) displays only setting to render the volume while the displaying is going up, down or both. up = 1, down = 2, up and down = 3;



dither=3; 

// dither settings. 0 no dither, 1 height dither only, 2 time dither only, 3 height and time dither (recommended)

dotsize=0x10101;


// adjust the smallest voxel size for each colour. presented as a hex value. each RGB colour is 
// represented as a number between 0 - 4; 
// value 0x040201 = would result RED DOT SIZE = 4, GREEN DOT SIZE = 2 and BLUE DOT SIZE = 1.



smear=0;

// enable or disable smear function.



dimcaps=0;

// enable or disable dim caps option.


normamp=0; 
normhang=0; 
normvang=0;


// norm values are to do with global normal shading (drawing shadows on 3D imagery) these values are  // the settings to apply on launch. Play with 'global normal shading' settings located under the 
// 'Misc'  VoxieMenu tab
// Note from Ken on how its calculated :
// "Currently, I use a single int32 (what used to be reserved0) in voxie_wind_t to store the normal // vector amplitude and direction. It is formatted as:
// vw.normhax = amp/*0..255*/ + ((hang/*-180..180*/&4095)<<8} + (vang/*-90..90*/<<20);


autosleep=0; 
autosleepsec=300;

// **HW ONLY** auto hibernation settings. If autosleep is set to 1. A


flip=0;

// flip can be a setting between 0 - 3, rotates the display by 0 = 0, 1 = 90', 2= 180', 3 = 270' //degrees 

flip3dmousehak=0;

// can be a number between 0 - 50 used to rotate space navigator inputs for displays in non normal
// orientations. 0 is off and how it should be in normal operating conditions.



keyst0x0= 256.00; keyst0y0= 170.00; keyst0x1= 656.00; keyst0y1= 170.00;
keyst0x3= 256.00; keyst0y3= 970.00; keyst0x2= 656.00; keyst0y2= 970.00;
keyst0x4= 256.00; keyst0y4= 170.00; keyst0x5= 656.00; keyst0y5= 170.00;
keyst0x7= 256.00; keyst0y7= 970.00; keyst0x6= 656.00; keyst0y6= 970.00;
colo0_r=255; colo0_g=255; colo0_b=155;
mono0_r=160; mono0_g=160; mono0_b=160;
mirror0x=0; mirror0y=0;

// Keystone settings for a projector. These values are set when you save run the Keystone
// application.  the keyst0 values are the points to projector map the volume. the 0 is to do with
// the display / projector number. On a 3 projector display 0 , 1 or 3.
// colo0_r, colo0_g, colo0_b = LED values when in RGB colour mode.
// mono0_r, mono0_g, mono0_b = LED values when in monochrome mode
// mirror0x, mirror0 = if set to 1 mirrors the image on the X or Y axis respectively



upndow=0; //0=sawtooth /|, 1=triangle /\
motortyp=1; 
scrshape=0; //0=helix, 1=peanut/hurricane
nblades=0; //1=/\ or /|, 2=/\/\ or /|/|, etc..
goalrpm=450; sync_usb_offset=0.000;
cpmaxrpm=1000;
sawtoothrat=0.875; 
radratio=0.500000; 
sawtoothdir=0; 
sawtoothcw=0; 
flipcrop=0;
iangperrps=3390; 
ianghak=18944;

// these values help define what kind of shape of the display and how the display creates
// its volumetric image. These values are used for testing out new hardware types and internal development. these settings are for more Voxon internal development. 








### Keystone Settings & Keystone Calibration -- for hardware only

As the VX1 achieves its 3D imagery by projecting a stack of 2D image frames unto a moving
reciprocating screen.  Naturally, as the screen physically moves further away from the projector’s image will spread out further. This technical problem is solved via a software keystone calibration.

To ensure that the projector’s image is not warped. Software used to make the image appear even. For
the software to make this correction accurately; the outer points of the volume must be defined.
This allows the software to scale the voxels within the volume appropriately and 3D geometry is not
distorted.

This process is called “Keystone Calibration” and can be conducted on your VX1 by choosing ‘keystone calibration’ located under the ‘aspect’ tab in Vertex’s Settings panel. Alternatively, it can be run by loading *Voxiedemo* and choosing ‘Keystone Cal’.



### Updates 

New versions of the Voxon Runtime (and Voxon Developers Kit) can be obtained by downloading the Voxon Installer from 
our website www.voxon.co


